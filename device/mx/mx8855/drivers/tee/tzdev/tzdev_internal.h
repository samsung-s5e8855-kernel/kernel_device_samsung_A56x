/*
 * Copyright (c) 2013 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef __TZDEV_INTERNAL_H__
#define __TZDEV_INTERNAL_H__

#include <linux/compiler.h>
#include <linux/list.h>
#include <linux/mutex.h>
#include <linux/slab.h>
#include <linux/spinlock.h>
#include <linux/version.h>

#include "tz_common.h"
#include "tzdev_smc.h"

#define TZDEV_DRIVER_VERSION(a,b,c)	(((a) << 16) | ((b) << 8) | (c))
#define TZDEV_DRIVER_CODE		TZDEV_DRIVER_VERSION(3,0,0)

#define SMC_NO(x)			"" # x
#define SMC(x)				"smc " SMC_NO(x)

#if defined(CONFIG_ARM)
#define REGISTERS_NAME	"r"
#define ARCH_EXTENSION	".arch_extension sec\n"
#define PARAM_REGISTERS
#elif defined(CONFIG_ARM64)
#define REGISTERS_NAME	"x"
#define ARCH_EXTENSION	""
#define PARAM_REGISTERS	"x8","x9","x10","x11","x12","x13","x14","x15","x16","x17"
#endif /* CONFIG_ARM */

#if defined(CONFIG_TZDEV_USE_ARM_CALLING_CONVENTION)
#define TZDEV_SMC_MAGIC			0
#define TZDEV_SMC_COMMAND(fid)		CREATE_SMC_CMD(SMC_TYPE_FAST, SMC_AARCH_32, SMC_TOS0_SERVICE_MASK, (fid))
#define TZDEV_SMC64_COMMAND(fid)	CREATE_SMC_CMD(SMC_TYPE_FAST, SMC_AARCH_64, SMC_TOS0_SERVICE_MASK, (fid))
#else /* CONFIG_TZDEV_USE_ARM_CALLING_CONVENTION */
#define TZDEV_SMC_MAGIC			(0xE << 16)
#define TZDEV_SMC_COMMAND(fid)		(fid)
#endif /* CONFIG_TZDEV_USE_ARM_CALLING_CONVENTION */

#define TZDEV_SMC_CONNECT		TZDEV_SMC_COMMAND(1)
#define TZDEV_SMC_SCHEDULE		TZDEV_SMC_COMMAND(3)
#define TZDEV_SMC_IW_SHMEM_REG		TZDEV_SMC_COMMAND(6)
#define TZDEV_SMC_IW_SHMEM_RLS		TZDEV_SMC_COMMAND(7)
#define TZDEV_SMC_SYSCONF		TZDEV_SMC_COMMAND(9)
#define TZDEV_SMC_TZ_PANIC_DUMP_INIT	TZDEV_SMC_COMMAND(12)
#define TZDEV_SMC_CHECK_VERSION		TZDEV_SMC_COMMAND(13)
#define TZDEV_SMC_BOOT_LOG_READ		TZDEV_SMC64_COMMAND(16)
#define TZDEV_SMC_PROFILER_CONTROL	TZDEV_SMC_COMMAND(17)
#define TZDEV_SMC_SCMA_CMD		TZDEV_SMC_COMMAND(18)
#define TZDEV_SMC_KMEMLEAK_CMD		TZDEV_SMC_COMMAND(21)
#define TZDEV_SMC_CHANNELS_INIT		TZDEV_SMC_COMMAND(22)
#define TZDEV_SMC_IW_EVENTS_INIT	TZDEV_SMC_COMMAND(23)
#define TZDEV_SMC_TVM_SHMEM_RLS		TZDEV_SMC_COMMAND(24)

/* Define type for exchange with Secure kernel */
#if defined(CONFIG_TZDEV_SK_PFNS_64BIT)
typedef	uint64_t	sk_pfn_t;
#else /* CONFIG_TZDEV_SK_PFNS_64BIT */
typedef	uint32_t	sk_pfn_t;
#endif /* CONFIG_TZDEV_SK_PFNS_64BIT */

#if defined(CONFIG_TZDEV_SK_MULTICORE)
#define NR_SW_CPU_IDS	nr_cpu_ids
#else /* CONFIG_TZDEV_SK_MULTICORE */
#define NR_SW_CPU_IDS	1
#endif /* CONFIG_TZDEV_SK_MULTICORE */

#define NR_SMC_ARGS	8

#ifndef DOXYGEN
struct tzdev_smc_data {
	unsigned long args[NR_SMC_ARGS];
};
#endif

int tzdev_smc(struct tzdev_smc_data *data);

#define tzdev_smc_cmd(p0, p1, p2, p3, p4, p5, p6)				\
({										\
	int ret;								\
	struct tzdev_smc_data data = { .args = {p0, p1, p2, p3, p4, p5, p6} };	\
										\
	ret = tzdev_smc(&data);							\
										\
	if (!ret)								\
		ret = data.args[0];						\
										\
	ret;									\
})

/**
 * @defgroup SWD_INTERFACE Interfaces to SWd
 * @{
 *
 * In the Arm architecture, synchronous control is transferred between the normal Non-secure state and
 * the Secure state through Secure Monitor Call (SMC) exceptions. SMC exceptions are generated by
 * the SMC instruction, and are handled by the Secure Monitor. The operation of the Secure Monitor
 * is determined by the parameters that are passed in through registers
 *
 * When the SMC convention is used, the SMC instruction takes a Function Identifier, up to
 * seventeen 64-bit arguments in registers, and returns the status and up to seventeen 64-bit
 * values in registers.
 *
 * When an SMC64 call is made:
 *
 * - A Function Identifier is passed in register W0.
 * - Arguments are passed in registers X1-X17.
 * - Results are returned in X0-X17.
 * - Registers X4-X17 must be preserved unless they contain results, as specified in the function
 *   definition.
 * - Registers X18-X30 and stack pointers SP_EL0 and SP_ELx are saved by the function that is called,
 *   and must be preserved over the SMC call
 *
 * TEEgris implements SMC calls described below
 */


/**
 * @def tzdev_smc_schedule
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Give CPU to SWD
 * @retval          0   always
 */
#define tzdev_smc_schedule()					tzdev_smc_cmd(TZDEV_SMC_SCHEDULE, 0, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_connect
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Connect smc channel with SWD
 * @param[in] mode channel purpose.\n
 * Supported modes:
 * 1. LOG
 * 2. SERVICE
 * 3. TRANSPORT
 * 4. PROFILER
 * 5. PANIC_DUMP
 * 6. SOCKET_EVENTS
 * 7. SOCKET
 * 8. KMEMLEAK
 *
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_connect(mode)			tzdev_smc_cmd(TZDEV_SMC_CONNECT, (mode), 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_iw_shmem_reg
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Registers pfns in smc channel as inter-world shared memory
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_iw_shmem_reg()				tzdev_smc_cmd(TZDEV_SMC_IW_SHMEM_REG, 0, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_iw_shmem_rls
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Releases iter-world shared memory by ID
 * @param[in] id     shared memory ID
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_iw_shmem_rls(id)				tzdev_smc_cmd(TZDEV_SMC_IW_SHMEM_RLS, (id), 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_tvm_shmem_rls
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief TVM-specific release iter-world shared memory by ID. Releases memory by calling
 * Resource Manager and notifies tzdev kernel module
 * @param[in] handle     shared memory handle
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_tvm_shmem_rls(handle)			tzdev_smc_cmd(TZDEV_SMC_TVM_SHMEM_RLS, (handle), 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_sysconf
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Get SWD system configurations. System configuration is returned via smc channel
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_sysconf()					tzdev_smc_cmd(TZDEV_SMC_SYSCONF, 0, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_tz_panic_dump_init
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 * @brief Used only for debug. Does not available in release builds
 */
#define tzdev_smc_tz_panic_dump_init()				tzdev_smc_cmd(TZDEV_SMC_TZ_PANIC_DUMP_INIT, 0, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_check_version
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Checks version compatability between SWD and NWD
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_check_version()				tzdev_smc_cmd(TZDEV_SMC_CHECK_VERSION, LINUX_VERSION_CODE, TZDEV_DRIVER_CODE, 0, 0, 0, 0)

/**
 * @def tzdev_smc_scma_cmd
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Do operation with secure contiguous allocator.
 * @param[in] cmd    Command to request.
 * Should be on of following:
 * 1. GET_NWD_REGIONS_INFO
 * 2. INIT_NWD_REGIONS
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_scma_cmd(cmd)					tzdev_smc_cmd(TZDEV_SMC_SCMA_CMD, cmd, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_boot_log_read
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Reads SWD boot log
 * @param[in] paddr Physical address of a destination buffer
 * @param[in] size_bytes  The destination buffer size in bytes
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_boot_log_read(paddr, size_bytes)                                                 \
	tzdev_smc_cmd(TZDEV_SMC_BOOT_LOG_READ, (paddr), (size_bytes), 0, 0, 0, 0)

/**
 * @def tzdev_smc_profiler_control
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 * @brief Used only for debug. Does not available in release builds
 */
#define tzdev_smc_profiler_control(cmd, arg)			tzdev_smc_cmd(TZDEV_SMC_PROFILER_CONTROL, (cmd), (arg), 0, 0, 0, 0)

/**
 * @def tzdev_smc_kmemleak_cmd
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 * @brief Used only for debug. Does not available in release builds
 */
#define tzdev_smc_kmemleak_cmd(cmd)				tzdev_smc_cmd(TZDEV_SMC_KMEMLEAK_CMD, cmd, 0, 0, 0, 0, 0)

/**
 * @def tzdev_smc_channels_init
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Initializes per-cpu smc channels
 * @param[in] arg         Implementation-defined data to be used for smc channel metadata
 * @param[in] metas_count Number of metadatas
 * @param[in] granularity Granularity in bytes, according to which data will be transferred to SWd
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_channels_init(arg, metas_count, granularity)                                     \
	tzdev_smc_cmd(TZDEV_SMC_CHANNELS_INIT, (arg), (metas_count), (granularity), 0, 0, 0)

/**
 * @def tzdev_smc_iw_events_init
 *
 * This define is wapper around SMC call. It's used to call SWD from NWD.\n
 *
 * @brief Initializes iter-world event subsystem
 * @param[in] events number of events
 * @retval           0 in case of success
 * @retval           <0 in case of error
 */
#define tzdev_smc_iw_events_init(events)			tzdev_smc_cmd(TZDEV_SMC_IW_EVENTS_INIT, (events), 0, 0, 0, 0, 0)

/** @}*/

struct tzio_sysconf *tzdev_sysconf(void);
int tzdev_run_init_sequence(void);
void tzdev_run_fini_sequence(void);
void tzdev_set_nwd_sysconf_flag(unsigned int flag);

#endif /* __TZDEV_INTERNAL_H__ */
