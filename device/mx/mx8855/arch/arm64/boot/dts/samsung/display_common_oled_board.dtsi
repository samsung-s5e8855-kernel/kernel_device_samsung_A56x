/*
 * Samsung Exynos SoC series Panel driver
 *
 * Copyright (c) 2020 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#if 1
#define ERR_FG_Disable
#endif

#if defined(ERR_FG_1)
#define ERR_FG_TRUE
#endif

#if 0
#define ADD_ID(lb) lb##${PANEL_DRV_ID}
#else
#define ADD_ID(lb) lb
#endif

&pinctrl_0 {
	ADD_ID(disp_rst_default): ADD_ID(disp-rst-default) {
		samsung,pins = SEC_GPIO(AP,gpc5,gpc5,0);
		samsung,pin-function = <1>;	// OUT
		samsung,pin-pud = <0>;		// NP
		samsung,pin-con-pdn = <3>;	// PREV in sleep
		samsung,pin-pud-pdn = <0>;	// NP in sleep
	};
};

#if 1
&pinctrl_0 {
	ADD_ID(disp_det_default): ADD_ID(disp_det_default) {
		GPIO_CONFIG_PUD(AP,gpc4,gpc4,0, FUNC_INPUT, PULL_DOWN);
	};
};
#endif

#if defined(ERR_FG_Rising_edge) || defined(ERR_FG_TRUE)
&${err_fg_parent} {
	ADD_ID(err_fg_default): ADD_ID(err_fg_default) {
		GPIO_CONFIG_PUD(${err_fg_gpio}, FUNC_INPUT, PULL_DOWN);
	};
};
#endif

#if defined(ERR_FG_Falling_edge)
&${err_fg_parent} {
	ADD_ID(err_fg_default): ADD_ID(err_fg_default) {
		GPIO_CONFIG_PUD(${err_fg_gpio}, FUNC_INPUT, PULL_UP);
	};
};
#endif

#if defined(ERR_FG_Falling_edge_pull_down)
&${err_fg_parent} {
	ADD_ID(err_fg_default): ADD_ID(err_fg_default) {
		GPIO_CONFIG_PUD(${err_fg_gpio}, FUNC_INPUT, PULL_DOWN);
	};
};
#endif

#if 1
&pinctrl_0 {
	ADD_ID(conn_det_default): ADD_ID(conn_det_default) {
		samsung,pins = SEC_GPIO(AP,gpc3,gpc3,0);
		samsung,pin-funciton = <0>;			// IN
		samsung,pin-pud = <0>;				// NP
		samsung,pin-con-pdn = <2>;			// IN
		samsung,pin-pud-pdn = <0>;			// NP in sleep
	};
};
#endif
#if 0
&${disp_te_parent} {
	ADD_ID(disp_te_default): ADD_ID(disp_te_default) {
		samsung,pins = SEC_GPIO(${disp_te_gpio});
		samsung,pin-funciton = <0xf>;			// INT
		samsung,pin-pud = <1>;					// PD
		samsung,pin-con-pdn = <3>;				// PREV in sleep
		samsung,pin-pud-pdn = <0>;				// NP in sleep
	};
};
#endif
#if 1
&pinctrl_0 {
	ADD_ID(pcd_default): ADD_ID(pcd_default) {
		GPIO_CONFIG_PUD(AP,gpc6,gpc6,0, FUNC_INPUT, PULL_DOWN);
	};
};
#endif

#if 0
&${avdd_en_parent} {
	ADD_ID(avdd_en_default): ADD_ID(avdd_en_default) {
		samsung,pins = SEC_GPIO(${avdd_en_gpio});
		samsung,pin-function = <1>;	// OUT
		samsung,pin-pud = <0>;		// NP
		samsung,pin-con-pdn = <3>;	// PREV in sleep
		samsung,pin-pud-pdn = <0>;	// NP in sleep
	};
};
#endif

#if 0
&${poc_spi_parent} {
	ADD_ID(poc_spi_sleep_state_np): ADD_ID(poc_spi_sleep_state_np) {
		samsung,pins = SEC_GPIO(${poc_spi_cs}), SEC_GPIO(${poc_spi_clk});
		samsung,pin-functions = <0>;	// GPIO
		samsung,pin-pud = <0>;		// NP
		samsung,pin-drv = <0>;
		samsung,pin-con-pdn = <2>;	// INPUT in sleep
		samsung,pin-pud-pdn = <0>;	// NP in sleep
	};
	ADD_ID(poc_spi_sleep_state_pd): ADD_ID(poc_spi_sleep_state_pd) {
		samsung,pins = SEC_GPIO(${poc_spi_mosi}), SEC_GPIO(${poc_spi_miso});
		samsung,pin-functions = <0>;	// GPIO
		samsung,pin-pud = <1>;		// PD
		samsung,pin-drv = <0>;
		samsung,pin-con-pdn = <2>;	// INPUT in sleep
		samsung,pin-pud-pdn = <1>;	// PD in sleep
	};
};
#endif

#if 0
&${lcd_vendor_check_parent} {
	ADD_ID(lcd_vendor_check_default): ADD_ID(lcd_vendor_check_default) {
		GPIO_CONFIG_PUD(${lcd_vendor_check_gpio}, FUNC_INPUT, PULL_NONE);
	};
};
#endif

#if 0
&${rst_ready_parent} {
	ADD_ID(rst_ready_default): ADD_ID(rst_ready_default) {
		GPIO_CONFIG_PUD(${rst_ready_gpio}, FUNC_INPUT, PULL_DOWN);
	};
};
#endif

#if 1
&l32_reg {
	regulator-boot-on;
};
#endif

#if 1
&l22_reg {
	regulator-boot-on;
};
#endif

#if 0
&${ddr_vddr_reg} {
	regulator-boot-on;
};
#endif

/ {
	fragment@panel_drv {
		target-path = "/";
		__overlay__ {
#if 0
		panel_drv_${PANEL_DRV_ID}: panel_drv_${PANEL_DRV_ID} {
#else
		panel_drv_0: panel_drv_0 {
#endif
				pinctrl-names = "default";
				pinctrl-0 = <
							&ADD_ID(disp_rst_default)
#if defined(ERR_FG_Rising_edge) || defined(ERR_FG_Falling_edge) || defined(ERR_FG_TRUE) || defined(ERR_FG_Falling_edge_pull_down)
							&ADD_ID(err_fg_default)
#endif
#if 1
							&ADD_ID(disp_det_default)
#endif
#if 1
							&ADD_ID(conn_det_default)
#endif
#if 0
							&ADD_ID(disp_te_default)
#endif
#if 0
							&ADD_ID(avdd_en_default)
#endif
#if 0
							&ADD_ID(poc_spi_sleep_state_np)
							&ADD_ID(poc_spi_sleep_state_pd)
#endif
#if 0
							&ADD_ID(lcd_vendor_check_default)
#endif
#if 0
							&ADD_ID(rst_ready_default)
#endif
				>;

				gpios {
					ADD_ID(disp_reset): disp-reset {
						gpios = <SEC_GPIO_REF(AP,gpc5,gpc5,0) 1>;	/* ACTIVE_LOW */
						dir = <0>;  /* OUT */
						irq-type = <0x0>;   /* NONE */
					};
#if 1
					ADD_ID(disp_det): disp-det {
						gpios = <SEC_GPIO_REF(AP,gpc4,gpc4,0) 1>;  /* 0:OK, 1:NOK(active) */
						dir = <1>;  /* IN */
						irq-type = <0x2>;   /* FALLING EDGE */
						irq-pend {
							reg = <0x0 0x15850A34 0x0>;
							bit = <0x2>;
						};
					};
#endif
#if defined(ERR_FG_Rising_edge) || defined(ERR_FG_TRUE)
					ADD_ID(err_fg): err-fg {
						gpios = <SEC_GPIO_REF(${err_fg_gpio}) 0>;		/* 0:NOK(active) 1:OK */
						dir = <1>;				/* IN */
						irq-type = <0x00002001>;	/* RISING EDGE | ONE_SHOT */
					};

#endif
#if defined(ERR_FG_Falling_edge) || defined(ERR_FG_Falling_edge_pull_down)
					ADD_ID(err_fg): err-fg {
						gpios = <SEC_GPIO_REF(${err_fg_gpio}) 0>;		/* 0:NOK(active) 1:OK */
						dir = <1>;				/* IN */
						irq-type = <2>;	/* Falling EDGE | ONE_SHOT */
					};
#endif
#if 1
					ADD_ID(conn_det): conn-det {
						gpios = <SEC_GPIO_REF(AP,gpc3,gpc3,0) 0>;
						dir = <1>;
						irq-type = <0x00002001>;	//RISING EDGE | ONE_SHOT
					};
#endif
#if 1
					ADD_ID(pcd): pcd {
						gpios = <SEC_GPIO_REF(AP,gpc6,gpc6,0) 1>;		/* 0:NOK(active) 1:OK */
						dir = <1>;				/* IN */
						irq-type = <0x2>;   /* FALLING EDGE */
					};
#endif
#if 0
					ADD_ID(disp_te): disp-te {
						gpios = <SEC_GPIO_REF(${disp_te_gpio}) 0>;		/* 0:NOK(active) 1:OK */
						dir = <1>;				/* IN */
						irq-type = <0x0>;   /* NONE */
					};
#endif
#if 0
					ADD_ID(avdd_en): avdd-en {
						gpios = <SEC_GPIO_REF(${avdd_en_gpio}) 0>;
						dir = <0>;
						irq-type = <0x0>;   /* NONE */
					};
#endif
#if 0
					ADD_ID(disp_reset_ready): disp_reset_ready {
						gpios = <SEC_GPIO_REF(${rst_ready_gpio}) 1>;		/* 0:NOK(active) 1:OK */
						dir = <1>;				/* IN */
						irq-type = <0x0>;   /* NONE */
					};
#endif

				};

				regulators {
#if 1
					ADD_ID(ddi_vci): ddi-vci {
						regulator = <&l32_reg>;
						type = <REGULATOR_TYPE_PWR>;
						def-voltage = <3000000>;
					};
#endif
#if 1
					ADD_ID(ddi_vdd3): ddi-vdd3 {
						regulator = <&l22_reg>;
						type = <REGULATOR_TYPE_PWR>;
						def-voltage = <1800000>;
					};
#endif
#if 0
					ADD_ID(ddr_vddr): ddr-vddr {
						regulator = <&${ddr_vddr_reg}>;
						type = <REGULATOR_TYPE_PWR>;
						def-voltage = <1600000>;
					};
#endif
#if 0
					ADD_ID(fd_elvdd): fd-elvdd {
						regulator = <&${fd_elvdd_reg}>;
						type = <REGULATOR_TYPE_PWR>;
					};
#endif
#if 0
					ADD_ID(ssd_elvss): ssd-elvss {
						regulator = <&${ssd_elvss_reg}>;
						type = <REGULATOR_TYPE_SSD>;
					};
#endif
#if 0
					ADD_ID(dpmic_elvdd_elvss): dpmic-elvdd-elvss {
						regulator = <&${dpmic_elvdd_elvss_reg}>;
						type = <REGULATOR_TYPE_PWR>;
					};
#endif
				};
			};
		};
	};
};
